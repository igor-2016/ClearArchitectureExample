<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
  internalLogLevel="Debug"
      internalLogFile="nlog.internal.log" >

  <extensions>
    <add assembly="Nlog.RabbitMQ.Target" />
	<add assembly="Elastic.Apm.NLog"/>
  </extensions>

  <variable name="logRabbitMqHost" value="s-kv-center-z22.officekiev.fozzy.lan" />
  <variable name="logRabbitMqUsert" value="testing" />
  <variable name="logRabbitMqPassword" value="UEr0Kghwho22ID" />
  <variable name="logRabbitMqVhost" value="logs" />
  <variable name="logRabbitMqExchange" value="logs" />


  <!-- the targets to write to -->
  <targets async="true">
    <!-- write to the void aka just remove -->
	<!--target xsi:type="Null" name="blackhole" /-->

    <!-- another file log, only own logs. Uses some ASP.NET core renderers -->
    <target xsi:type="File" name="logfile" fileName="ecom-log-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger}|${message} ${exception}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}|error-type: ${error-type}" />

    <target xsi:type="File" name="json-file" fileName="ecom-jsonlog-${shortdate}.json" >
      <layout xsi:type="JsonLayout" includeAllProperties="false" excludeProperties="Comma-separated list (string)">
        <attribute name="time" layout="${longdate}" />
        <attribute name="requestGuid" layout="${mdlc:item=requestGuid}" />
        <attribute name="correlationId" layout="${mdlc:item=correlationId}" />
        <attribute name="level" layout="${level:upperCase=true}"/>
        <attribute name="message" layout="${message}" />
        <attribute name="eventProperties" encode="false" >
          <layout type='JsonLayout' includeAllProperties="true"  maxRecursionLimit="2"/>
        </attribute>
        <attribute name="errorType" layout="${error-type}" />
      </layout>
    </target>
    
    <target
      xsi:type="ColoredConsole"
      name="defaultConsole"
      layout="${longdate} ${uppercase:${level}} [${logger}] ${when:when='${event-properties:item=msg}'=='':${message}:else=${event-properties:item=msg}} ${event-properties:item=requestGuid} ${exception} ${error-type}" />
  
    <target 
      xsi:type="RabbitMQ"
      name="json-rabbit" 
      username="${logRabbitMqUsert}"
      password="${logRabbitMqPassword}"
      hostname="${logRabbitMqHost}"
      exchange="${logRabbitMqExchange}"
      port="5672"
      vhost="${logRabbitMqVhost}"
      deliveryMode="Persistent"
      useJSON ="true"
    >
        <field key="project" name="project" layout="ECom"/>
        <field key="environment" name="environment" layout="Development"/>

        <field key="levelString" name="levelString" layout="${uppercase:${level}}"/>
        <field key="machineName" name="machineName" layout="${machinename}"/>
        <field key="assemblyVersion" name="assemblyVersion" layout="${assembly-version}"/>
        <field key="requestGuid" name="requestGuid" layout="${mdlc:item=requestGuid}"/>
        <field key="filialId" name="filialId" layout="${mdlc:item=filialId}"/>
        <field key="userId" name="userId" layout="${mdlc:item=userId}"/>
        <field key="posUrl" name="posUrl" layout="${mdlc:item=posUrl}"/>
        <field key="basketGuid" name="basketGuid" layout="${when:when='${mdlc:item=basketGuid}'=='':inner=${event-properties:item=basketGuid}:else=${mdlc:item=basketGuid}}"/>
        <field key="userGuid" name="userGuid" layout="${mdlc:item=userGuid}"/>
        <field key="unikaMethod" name="unikaMethod" layout="${mdlc:item=unikaMethod}"/>
        <field key="errorType" name="errorType" layout="${error-type}"/>
    </target>
  
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--В девел окружении нужно оставить только консоль, что не забрасывать сообщениями кролика...
    Тем более, что кролик настроен на тестовую среду!-->
    <logger name="Hangfire.*" minlevel="Debug" writeTo="defaultConsole" />
    <logger name="ECom.*" minlevel="Trace" writeTo="defaultConsole" />
    <!--logger name="ECom.*" minlevel="Trace" writeTo="json-rabbit" /-->
    <!--logger name="ECom.*" minlevel="Trace" writeTo="json-file" /-->

    <logger name="MassTransit*" minlevel="Debug" writeTo="defaultConsole" >
      <filters defaultAction="Log">
        <when condition="starts-with('${message}','SEND')" action="Ignore"/>
        <when condition="starts-with('${message}','RECEIVE')" action="Ignore"/>
      </filters>
    </logger>

    <!--logger name="MassTransit*" minlevel="Debug" writeTo="json-rabbit" >
      <filters defaultAction="Log">
        <when condition="starts-with('${message}','SEND')" action="Ignore"/>
        <when condition="starts-with('${message}','RECEIVE')" action="Ignore"/>
      </filters>
    </logger-->

    <!--logger name="MassTransit*" minlevel="Debug" writeTo="json-file" >
      <filters defaultAction="Log">
        <when condition="starts-with('${message}','SEND')" action="Ignore"/>
        <when condition="starts-with('${message}','RECEIVE')" action="Ignore"/>
      </filters>
    </logger-->
    
    <!--Skip Microsoft logs and so log only own logs-->
    <logger name="Microsoft.*" minlevel="Trace" writeTo="blackhole" final="true" />    
  </rules>
</nlog>
